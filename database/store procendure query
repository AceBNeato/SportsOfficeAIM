
    //Config

    DELIMITER //

    CREATE PROCEDURE AddAdminIfAllowed(
        IN p_full_name VARCHAR(255),
        IN p_address VARCHAR(255),
        IN p_email VARCHAR(255),
        IN p_password VARCHAR(255),
        IN p_status ENUM('undergraduate', 'alumni')
    )
    BEGIN
        DECLARE admin_count INT DEFAULT 0;

        -- Count existing admins
        SELECT COUNT(*) INTO admin_count FROM admins;

        IF admin_count < 2 THEN
            -- Check if email already exists
            IF NOT EXISTS (SELECT 1 FROM admins WHERE email = p_email) THEN
                INSERT INTO admins (full_name, address, email, password, status)
                VALUES (p_full_name, p_address, p_email, p_password, p_status);
                SELECT 'Admin created successfully' AS result;
            ELSE
                SELECT 'Admin already exists' AS result;
            END IF;
        ELSE
            SELECT 'Admin limit reached' AS result;
        END IF;
    END //

    DELIMITER ;




    //login

    DELIMITER //

    CREATE PROCEDURE LoginUser (
        IN p_email VARCHAR(255),
        IN p_password VARCHAR(255)
    )
    BEGIN
        DECLARE user_id INT DEFAULT NULL;
        DECLARE user_email VARCHAR(255);
        DECLARE user_password VARCHAR(255);
        DECLARE user_role VARCHAR(20);

        -- Try admin
        SELECT id, email, password INTO user_id, user_email, user_password
        FROM admins WHERE email = p_email LIMIT 1;

        IF user_id IS NOT NULL THEN
            IF BINARY user_password = p_password THEN
                SET user_role = 'admin';
                SELECT user_id AS id, user_email AS email, user_role AS role;
            ELSE
                SELECT 'Incorrect password' AS message;
            END IF;
        ELSE
            -- Try student
            SELECT id, email, password INTO user_id, user_email, user_password
            FROM users WHERE email = p_email LIMIT 1;

            IF user_id IS NOT NULL THEN
                IF BINARY user_password = p_password THEN
                    SET user_role = 'student';
                    SELECT user_id AS id, user_email AS email, user_role AS role;
                ELSE
                    SELECT 'Incorrect password' AS message;
                END IF;
            ELSE
                SELECT 'No user found with that email' AS message;
            END IF;
        END IF;
    END //

    DELIMITER ;




    /Admin User

    DELIMITER //

    CREATE PROCEDURE SearchUsers(IN search_term VARCHAR(255))
    BEGIN
        IF search_term IS NULL OR TRIM(search_term) = '' THEN
            SELECT student_id, full_name, address FROM users;
        ELSE
            SELECT student_id, full_name, address FROM users
            WHERE LOWER(student_id) LIKE CONCAT('%', LOWER(search_term), '%')
               OR LOWER(full_name) LIKE CONCAT('%', LOWER(search_term), '%');
        END IF;
    END //

    DELIMITER ;


    // admin report

    DELIMITER //

    CREATE PROCEDURE GetTotalStudents()
    BEGIN
        SELECT COUNT(*) AS total FROM users;
    END //

    DELIMITER ;

    DELIMITER //
    CREATE PROCEDURE find_user_by_email(IN userEmail VARCHAR(255))
    BEGIN
        -- Try to find in Admins first
        SELECT id, email, password, 'admin' AS role
        FROM admins
        WHERE email = userEmail
        LIMIT 1;

        -- If no rows found, search Users
        IF ROW_COUNT() = 0 THEN
            SELECT id, email, password, 'student' AS role
            FROM users
            WHERE email = userEmail
            LIMIT 1;
        END IF;
    END //
    DELIMITER ;


DELIMITER //

CREATE PROCEDURE AddUserIfAllowed(
    IN p_student_id VARCHAR(50),
    IN p_full_name VARCHAR(255),
    IN p_address VARCHAR(255),
    IN p_email VARCHAR(255),
    IN p_password VARCHAR(255),
    IN p_status ENUM('undergraduate', 'alumni')
)
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM users WHERE email = p_email OR student_id = p_student_id
    ) THEN
        INSERT INTO users (student_id, full_name, address, email, password, status)
        VALUES (p_student_id, p_full_name, p_address, p_email, p_password, p_status);
        SELECT 'User added successfully' AS result;
    ELSE
        SELECT 'Email or Student ID already registered' AS result;
    END IF;
END //

DELIMITER ;




//forgotpass

DELIMITER //

CREATE PROCEDURE ResetPasswordRequest(
    IN p_student_id VARCHAR(50),
    IN p_email VARCHAR(255),
    IN p_reset_token_hash VARCHAR(64),
    IN p_reset_token_expires_at DATETIME
)
BEGIN
    DECLARE userCount INT;

    SELECT COUNT(*) INTO userCount
    FROM users
    WHERE student_id = p_student_id
      AND email = p_email;

    IF userCount = 1 THEN
        UPDATE users
        SET reset_token_hash = p_reset_token_hash,
            reset_token_expires_at = p_reset_token_expires_at
        WHERE student_id = p_student_id
          AND email = p_email;
    END IF;

    SELECT userCount AS result;
END //

DELIMITER ;


//For data reset password
ALTER TABLE user
  ADD `reset_token_hash` VARCHAR(64) NULL DEFAULT NULL,
  ADD `reset_token_expires_at` DATETIME NULL DEFAULT NULL,
  ADD UNIQUE (`reset_token_hash`);